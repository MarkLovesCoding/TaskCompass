/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/dOukzIDUO5V
 */
import Link from "next/link";
import {
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuContent,
  DropdownMenu,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { TeamHeader } from "@/components/component/team-header";
import {
  CardTitle,
  CardDescription,
  CardHeader,
  Card,
} from "@/components/ui/card";
import type { UserDto } from "@/use-cases/user/types";
import getUserTeams from "@/data-access/teams/get-user-teams";
import getUserProjects from "@/data-access/projects/get-user-projects";
// get teams

// get projects
export async function UserPageComponent({ user }: { user: UserDto }) {
  const usersTeams = await getUserTeams(user);
  const usersProjects = await getUserProjects(user);

  return (
    <div className="flex flex-col w-full min-h-screen">
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-10">
        <div>
          <h1 className="text-lg font-bold">Hey {user.name}!</h1>
          <p className="text-sm ">
            {"Here's a summary of your teams and projects."}
          </p>
        </div>

        <div>
          {/* <TeamHeader user={user} /> */}
          <h1 className="text-lg font-bold">Teams</h1>
          <div className="grid gap-4 md:grid-cols-3">
            {usersTeams &&
              usersTeams.map((team, team_idx) => {
                return (
                  <Card key={team_idx}>
                    <Link href={`/TEAMS-CLEAN/${team.id}`}>
                      <CardHeader>
                        <CardTitle>{team.name}</CardTitle>
                        {/* <CardDescription>{team.description}</CardDescription> */}
                      </CardHeader>
                    </Link>
                  </Card>
                );
              })}
          </div>
        </div>
        <div>
          {/* <TeamHeader user={user} /> */}
          <h1 className="text-lg font-bold">Projects</h1>

          <div className="grid gap-4 md:grid-cols-3">
            {usersProjects &&
              usersProjects.map((project, project_idx) => (
                <Card key={project_idx}>
                  <Link href={`/PROJECTS-CLEAN/${project.id}`}>
                    <CardHeader>
                      <CardTitle>{project.name}</CardTitle>
                      <CardDescription>{project.description}</CardDescription>
                    </CardHeader>
                  </Link>
                </Card>
              ))}
          </div>
        </div>
      </main>
    </div>
  );
}

//@ts-expect-error
function LayoutIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
      <line x1="3" x2="21" y1="9" y2="9" />
      <line x1="9" x2="9" y1="21" y2="9" />
    </svg>
  );
}

//@ts-expect-error

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}
